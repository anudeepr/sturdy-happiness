syntax = "proto2";
option optimize_for = SPEED;
option java_package = "pipe.work";

import "common.proto";
import "election.proto";

message WorkState {
   required int32 enqueued = 1;
   required int32 processed = 2;
}

message Heartbeat {
   required WorkState state = 1;
}

/**
 * description of the work
 */
message Task {  
    required int64 series_id = 1;
    required int32 seq_id = 2;
}

message Node {
  required int32 node_id = 1;
  required string ip_addr = 2;
  required string work_port = 3;
}

message Discovery{
  repeated Node nodes = 1;
  optional Node node = 2;
  optional Node leader = 3;
}

// These are messages to keep the network running (not to perform work)
message WorkMessage {
   required Header header = 1;
   required int64 secret = 2;
   required MessageType type = 3;

   /**
    * The actions (request or response) is
    * implicit through which data structure is in the payload.
    */ 
    enum MessageType{
        DISCOVERNODE = 1;
        DISCOVERNODEREPLY = 2;
    }

   oneof payload {
      Failure err = 4;
      
      // a sanity check for testing
      bool ping = 5;

      // status updates between adjacent workers
      Heartbeat beat = 6;

      Task task = 7;
      WorkState state = 8;
      LeaderStatus leader = 9;

      //this payload is used while discovering the messages
      Discovery discovery = 10;

   }
   
}
