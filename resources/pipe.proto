syntax = "proto2";
option optimize_for = SPEED;
//option java_package = "pipe.common";
option java_package = "routing";

import "common.proto";


/**
 * the accompanying information for all messages. Provides origination,
 * security, authentication, and tracking information
 */


/**
 * IMPORTANT !!::
 * Command Message is delivered from the client and will be used to communicate with the client
*/

message CommandMessage {
   required Header header = 1;

   enum MessageType{
   	PING = 1;
   	REQUEST = 2;
   	RESPONSE = 3;
   }

   oneof payload {
        // a client (external) sanity check for testing
        bool ping = 3;

        string message = 4;

        Failure err = 5;
        Request req = 6;
        Response resp = 7;
   }

}




enum TaskType {
 READFILE = 1;
 WRITEFILE = 2;
 DELETEFILE = 3;
 UPDATEFILE = 4;
 }

message Request {
 required TaskType requestType = 3;
 oneof payload{
 WriteBody rwb = 4;
 ReadBody rrb = 5;
 }
}

message WriteBody{
 optional string file_id = 1;
 required string filename = 2;
 optional string file_ext=3;
 optional Chunk chunk=4;
 optional int32 num_of_chunks = 5;
}

//this payload will be only present when chunks are missing on server during write
//and will request client to send it again.
message WriteResponse {
 repeated int32 ChunkId=1;
}

message Chunk{
 required int32 chunk_id = 1;
 required bytes chunk_data = 6;
 optional int32 chunk_size=9;
}

message ReadBody{
 optional string filename = 1; // to get all use * wildcard
 optional int64 file_id = 2;
 optional int64 chunk_id = 3;
 optional int64 chunk_size = 4;
}

message ReadResponse{
 optional string file_id = 1;
 required string filename = 2;
 optional string file_ext= 3;
 optional int32 num_of_chunks = 4;
 repeated ChunkLocation chunk_location = 5;
}

message ChunkLocation{
 optional int32 chunkid = 1;
 repeated Node node = 2;
}

message Node{
 required int32 node_id = 1;
 required string host = 2;
 required int32 port = 3;
}

message Response{
 required TaskType responseType = 1;
 required Status status = 2;
 optional string filename=3;
 enum Status{
 Success = 1;
 Failure = 2;
 }
 oneof payload{
 WriteResponse writeResponse = 4;
 ReadResponse readResponse = 5;
 }
}

